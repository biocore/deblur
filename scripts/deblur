#!/usr/bin/env python

# -----------------------------------------------------------------------------
# Copyright (c) 2015, The Deblur Development Team.
#
# Distributed under the terms of the BSD 3-clause License.
#
# The full license is in the file LICENSE, distributed with this software.
# -----------------------------------------------------------------------------

import click

from skbio.parse.sequences import parse_fasta

from deblur.deblurring import deblur
from deblur.workflow import (launch_workflow, split_seqs_on_sample_ids,
                             demultiplex_seqs, trim_seqs, dereplicate_seqs,
                             remove_singletons_seqs, remove_artifacts_seqs,
                             multiple_sequence_alignment,
                             remove_chimeras_denovo_from_seqs,
                             generate_biom_table, assign_taxonomy)


@click.group()
def deblur_cmds():
    pass


# DEBLUR SEQUENCES COMMAND
@deblur_cmds.command()
@click.argument('seqs_fp', required=True,
                type=click.Path(resolve_path=True, readable=True, exists=True,
                                file_okay=True))
@click.option('--read-error', '-e', required=False, type=float, default=0.05,
              help="Read error rate")
@click.option('--mean-error', '-m', required=False, type=float, default=None,
              help="The mean error, used for original sequence estimate. If "
                   "not passed the same value as --read-error will be used")
@click.option('--error-dist', '-d', required=False, type=str, default=None,
              help="A comma separated list of error probabilities for each "
                   "hamming distance. The length of the list determines the "
                   "number of hamming distances taken into account.")
@click.option('--indel-prob', '-i', required=False, type=float, default=0.01,
              help='Insertion/deletion (indel) probability '
                   '(same for N indels)')
@click.option('--indel-max', required=False, type=int, default=3,
              help="Maximal indel number")
def deblur_seqs(seqs_fp, read_error, mean_error, error_dist, indel_prob,
                indel_max):
    """Step 6: clean read errors from Illumina reads"""
    # If the user provided an error_dist value, we map it to a list of floats
    if error_dist:
        error_dist = list(map(float, error_dist.split(',')))

    with open(seqs_fp, 'U') as f:
        seqs = deblur(parse_fasta(f), read_error, mean_error, error_dist,
                      indel_prob, indel_max)

    output_path = "%s.clean" % seqs_fp
    with open(output_path, 'w') as f:
        for s in seqs:
            f.write(s.to_fasta())


# DEMULTIPLEX SEQUENCES COMMAND
@deblur_cmds.command()
@click.argument('seqs_fp', required=True,
              type=click.Path(resolve_path=True, readable=True, exists=True,
                              file_okay=True))
@click.argument('mapping_fp', required=True,
              type=click.Path(resolve_path=True, readable=True, exists=True,
                              file_okay=True))
def demultiplex(seqs_fp, mapping_fp):
    """Step 1: demultiplex and quality filter"""
    seqs = demultiplex_seqs(seqs_fp, mapping_fp)


# SPLIT SEQUENCES ON SAMPLE IDS COMMAND
@deblur_cmds.command()
@click.argument('seqs_fp', required=True,
              type=click.Path(resolve_path=True, readable=True, exists=True,
                              file_okay=True))
def split_on_sample_ids(seqs_fp, mapping_fp):
    """Step 2: split sequences on Sample IDs"""
    seqs = split_seqs_on_sample_ids(seqs_fp)


# TRIM LENGTH COMMAND
@deblur_cmds.command()
@click.argument('seqs_fp', required=True,
              type=click.Path(resolve_path=True, readable=True, exists=True,
                              file_okay=True))
@click.option('--trim-length', '-t', required=False, type=int, default=100,
              help="Sequence trim length")
def trim(seqs_fp, trim_len):
    """Step 3: trim FASTA sequences"""
    seqs = trim_seqs(seqs_fp)


# SEQUENCE DEREPLICATION COMMAND
@deblur_cmds.command()
@click.argument('seqs_fp', required=True,
              type=click.Path(resolve_path=True, readable=True, exists=True,
                              file_okay=True))
def dereplicate(seqs_fp):
    """Step 4a: dereplicate FASTA sequences"""
    seqs = dereplicate_seqs(seqs_fp)


# SINGLETON REMOVAL COMMAND
@deblur_cmds.command()
@click.argument('seqs_fp', required=True,
              type=click.Path(resolve_path=True, readable=True, exists=True,
                              file_okay=True))
def remove_singletons(seqs_fp):
    """Step 4b: remove singletons"""
    seqs = remove_singletons_seqs(seqs_fp)


# ARTIFACT REMOVAL COMMAND
@deblur_cmds.command()
@click.argument('seqs_fp', required=True,
              type=click.Path(resolve_path=True, readable=True, exists=True,
                              file_okay=True))
def remove_artifacts(seqs_fp):
    """Step 5: remove artifacts"""
    seqs = remove_artifacts_seqs(seqs_fp)


# MULTIPLE SEQUENCE ALIGNMENT COMMAND
@deblur_cmds.command()
@click.argument('seqs_fp', required=True,
              type=click.Path(resolve_path=True, readable=True, exists=True,
                              file_okay=True))
def multiple_seq_alignment(seqs_fp):
    """Step 6: multiple sequence alignment"""
    seqs = multiple_sequence_alignment(seqs_fp)


# DE NOVO CHIMERA REMOVAL COMMAND
@deblur_cmds.command()
@click.argument('seqs_fp', required=True,
              type=click.Path(resolve_path=True, readable=True, exists=True,
                              file_okay=True))
def remove_chimeras_denovo(seqs_fp):
    """Step 7: remove chimeras de novo using UCHIME"""
    seqs = remove_chimeras_denovo_from_seqs(seqs_fp)


# GENERATE BIOM TABLE COMMAND
@deblur_cmds.command()
@click.argument('seqs_fp', required=True,
              type=click.Path(resolve_path=True, readable=True, exists=True,
                              file_okay=True))
def build_biom_table(seqs_fp):
    """Step 8: Generate a BIOM table"""
    rep_set, biom_table = generate_biom_table(seqs_fp)


# ASSIGN TAXONOMY COMMAND
@deblur_cmds.command()
@click.argument('seqs_fp', required=True,
              type=click.Path(resolve_path=True, readable=True, exists=True,
                              file_okay=True))
@click.argument('biom_fp', required=True,
              type=click.Path(resolve_path=True, readable=True, exists=True,
                              file_okay=True))
def assign_taxonomy(seqs_fp, biom_fp):
    """Step 9: Assign taxonomy"""
    biom_table_w_tax = assign_taxonomy(seqs_fp, biom_fp)


# LAUNCH FULL DEBLUR PIPELINE COMMAND
@deblur_cmds.command()
@click.argument('seqs_fp', required=True,
              type=click.Path(resolve_path=True, readable=True, exists=True,
                              file_okay=True))
@click.argument('mapping_fp', required=True,
              type=click.Path(resolve_path=True, readable=True, exists=True,
                              file_okay=True))
def workflow(seqs_fp, mapping_fp, read_error, mean_error, error_dist,
             indel_prob, indel_max):
    """Launch full deblur workflow"""
    seqs = launch_workflow(seqs_fp, mapping_fp)


if __name__ == '__main__':
    deblur_cmds()
